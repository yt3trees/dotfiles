description = "ソースコード解析"

prompt = """
# ソースコード詳細解析指示書

## 解析依頼内容
ソースコードを詳細に解析し、理解しやすいMarkdown形式のドキュメントを作成してください。

## 解析要件

### 1. 基本情報の整理
- **ファイル名・パス**: 
- **言語・フレームワーク**: 
- **推定される役割・目的**: 
- **依存関係**: 使用しているライブラリ、モジュール、外部API等

### 2. コード構造の可視化
```mermaid
graph TD
    A[メイン処理] --> B[サブ処理1]
    A --> C[サブ処理2]
    B --> D[詳細処理]
```
- クラス図、フローチャート、シーケンス図を適切に使い分けて構造を表現
- 処理の流れが一目で分かるよう工夫

### 3. 詳細解析項目

#### 3.1 関数・メソッド解析
各関数・メソッドについて以下を記載：
- **関数名**: 
- **目的・役割**: 
- **引数**: 型、意味、必須/任意
- **戻り値**: 型、意味
- **処理ロジック**: ステップバイステップで説明
- **注意点・制約**: エラーハンドリング、パフォーマンス等

#### 3.2 データ構造解析
- **変数・定数**: 用途と値の範囲
- **データ型**: カスタム型、構造体、配列等の詳細
- **データフロー**: データの流れと変換過程

#### 3.3 ビジネスロジック解析
- **業務要件**: コードが実現している業務処理
- **制約・ルール**: 実装されているビジネスルール
- **例外処理**: エラーケースとその対応

### 4. 品質・保守性評価

#### 4.1 コード品質
- **可読性**: 命名規則、コメント、構造の適切性
- **保守性**: 修正・拡張のしやすさ
- **再利用性**: 他の箇所での活用可能性

#### 4.2 潜在的な問題点
- **パフォーマンス**: ボトルネックになりそうな箇所
- **セキュリティ**: 脆弱性の可能性
- **エラーハンドリング**: 不適切な例外処理

### 5. 改善提案
- **リファクタリング案**: より良い実装方法
- **パフォーマンス改善**: 最適化の提案
- **保守性向上**: コードの整理・分割案

## 出力形式の要求

### ドキュメント構成
1. **概要** (Executive Summary)
2. **アーキテクチャ図** (Mermaid図)
3. **詳細解析結果**
4. **コードレビュー**
5. **改善提案**
6. **付録** (用語集、参考資料等)

### 記述スタイル
- **階層構造**: 見出しレベルを適切に使用
- **視覚的表現**: 表、コードブロック、図を効果的に活用
- **具体例**: 実際のコード片を引用して説明
- **相互参照**: 関連する箇所への内部リンク

### Mermaid図の活用指針
- **フローチャート**: 処理の流れ
- **クラス図**: オブジェクト指向設計
- **シーケンス図**: 時系列での相互作用
- **ガントチャート**: 処理の時間軸（必要に応じて）

## 解析の深度要求
- **初回読解**: 全体の流れと目的を把握
- **詳細分析**: 各部分の具体的な処理内容
- **関連性分析**: 各部分の相互関係と依存性
- **影響範囲分析**: 修正時の影響範囲の特定

## 対象読者
- 開発チームメンバー
- システム保守担当者
- 新規参画メンバー
- レビュアー

---

**注意事項**:
- コードの理解を深めるため、複数回読み返して解析を実施
- 不明な箇所は推測ではなく「要確認」として明記
- 業務観点での解説を含める
- 実装の意図や設計思想についても可能な限り推察して記載
"""
